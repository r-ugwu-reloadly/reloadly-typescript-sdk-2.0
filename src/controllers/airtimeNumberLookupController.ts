/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AirtimeNumberLookupController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param phone               This is the mobile number whose details are to be retrieved.
   * @param countrycode         This is the ISO code of the country where the mobile number is registered.
   * @param suggestedAmountsMap Indicates if this field should be returned as a response. Default value is
   *                                      false.
   * @param suggestedAmounts    Indicates if this field should be returned as a response. Default value is
   *                                      false.
   * @return Response from the API call
   */
  async reloadlyNumberLookupGet(
    accept: string,
    authorization: string,
    phone: number,
    countrycode: string,
    suggestedAmountsMap?: string,
    suggestedAmounts?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      phone: [phone, number()],
      countrycode: [countrycode, string()],
      suggestedAmountsMap: [suggestedAmountsMap, optional(string())],
      suggestedAmounts: [suggestedAmounts, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('suggestedAmountsMap', mapped.suggestedAmountsMap);
    req.query('suggestedAmounts', mapped.suggestedAmounts);
    req.appendTemplatePath`/operators/mnp-lookup/phone/${mapped.phone}/countries/${mapped.countrycode}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param contentType
   * @param body          Request Payload
   * @return Response from the API call
   */
  async reloadlyNumberLookupPost(
    accept: string,
    authorization: string,
    contentType: string,
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/mnp-lookup/operators');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      contentType: [contentType, string()],
      body: [body, unknown()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
