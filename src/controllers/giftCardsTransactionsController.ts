/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class GiftCardsTransactionsController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param size          This indicates the number of transactions to be retrieved on a page.
   * @param page          This indicates the page of the transactions list being retrieved.
   * @param startDate     Indicates the start date for the range of transactions to be retrieved.
   * @param endDate       Indicates the end date for the range of transactions to be retrieved.
   * @return Response from the API call
   */
  async reloadlyGiftCardsTransactions(
    accept: string,
    authorization: string,
    size?: string,
    page?: string,
    startDate?: string,
    endDate?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/reports/transactions');
    req.baseUrl('Gift Cards');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      size: [size, optional(string())],
      page: [page, optional(string())],
      startDate: [startDate, optional(string())],
      endDate: [endDate, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('size', mapped.size);
    req.query('page', mapped.page);
    req.query('startDate', mapped.startDate);
    req.query('endDate', mapped.endDate);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Could not retrieve/update resources at the moment, please try again later');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param transactionid Indicates the identification number of the transaction to be retrieved.
   * @return Response from the API call
   */
  async reloadlyGiftCardsTransactionById(
    accept: string,
    authorization: string,
    transactionid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Gift Cards');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      transactionid: [transactionid, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/reports/transactions/${mapped.transactionid}`;
    req.throwOn(401, ApiError, 'Indicates the identification number of the transaction to be retrieved.');
    req.throwOn(404, ApiError, 'Could not retrieve/update resources at the moment, please try again later');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
