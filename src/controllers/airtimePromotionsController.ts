/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AirtimePromotionsController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param size          This indicates the number of promotions to be retrieved on a page. Default value
   *                                is 200.
   * @param page          This indicates the page of the promotions list being retrieved. Default value is 1.
   * @param languageCode  This indicates the language you want the promotion information to be displayed in.
   *                                The language code is to be specified in the ISO 639-1 format. Choices are 'EN',
   *                                'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and 'DE'. Default is 'EN'.
   *                                This is a case-insensitive field. The promotion information is returned in your
   *                                requested language irrespective of the original language in which the promotion was
   *                                launched.
   * @return Response from the API call
   */
  async reloadlyAirtimePromotions(
    accept: string,
    authorization: string,
    size?: number,
    page?: number,
    languageCode?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/promotions');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      size: [size, optional(number())],
      page: [page, optional(number())],
      languageCode: [languageCode, optional(number())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('size', mapped.size);
    req.query('page', mapped.page);
    req.query('languageCode', mapped.languageCode);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param promotionid   The promotion's identification number.
   * @param languageCode  This indicates the language you want the promotion information to be displayed in.
   *                                The language code is to be specified in the ISO 639-1 format. Choices are 'EN',
   *                                'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and 'DE'. Default is 'EN'.
   *                                This is a case-insensitive field. The promotion information is returned in your
   *                                requested language irrespective of the original language in which the promotion was
   *                                launched.
   * @return Response from the API call
   */
  async reloadlyAirtimePromotionById(
    accept: string,
    authorization: string,
    promotionid: string,
    languageCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      promotionid: [promotionid, string()],
      languageCode: [languageCode, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('languageCode', mapped.languageCode);
    req.appendTemplatePath`/promotions/${mapped.promotionid}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Promotion not found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param countrycode
   * @return Response from the API call
   */
  async reloadlyAirtimePromotionByIso(
    accept: string,
    authorization: string,
    countrycode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      countrycode: [countrycode, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/promotions/country-codes/${mapped.countrycode}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param operatorid
   * @return Response from the API call
   */
  async reloadlyAirtimePromotionByOperatorId(
    accept: string,
    authorization: string,
    operatorid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      operatorid: [operatorid, string()],
    });
    req.header('Accept', mapped.accept);
    req.appendTemplatePath`/promotions/operators/${mapped.authorization}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    return req.callAsJson(unknown(), requestOptions);
  }
}
