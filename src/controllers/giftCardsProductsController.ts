/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { boolean, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class GiftCardsProductsController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param includeRange  Indicates the list of gift card products with the denominationType property
   *                                 specified as RANGE are to be retrieved.
   * @param includeFixed  Indicates the list of gift card products with the denominationType property
   *                                 specified as FIXED are to be retrieved.
   * @param size          This indicates the number of gift card products to be retrieved on a page.
   * @param page          This indicates the page of the product list being retrieved.
   * @param productName   Indicates the name of the gift card product.
   * @param countryCode   Indicates the ISO code of the country whose gift card products are to be
   *                                 retrieved.
   * @return Response from the API call
   */
  async reloadlyGiftCardsProducts(
    accept: string,
    authorization: string,
    includeRange?: boolean,
    includeFixed?: boolean,
    size?: number,
    page?: string,
    productName?: string,
    countryCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/products');
    req.baseUrl('Gift Cards');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      includeRange: [includeRange, optional(boolean())],
      includeFixed: [includeFixed, optional(boolean())],
      size: [size, optional(number())],
      page: [page, optional(string())],
      productName: [productName, optional(string())],
      countryCode: [countryCode, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('includeRange', mapped.includeRange);
    req.query('includeFixed', mapped.includeFixed);
    req.query('size', mapped.size);
    req.query('page', mapped.page);
    req.query('productName', mapped.productName);
    req.query('countryCode', mapped.countryCode);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param productid     The product's identification number.
   * @return Response from the API call
   */
  async reloadlyGiftCardsProductById(
    accept: string,
    authorization: string,
    productid: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Gift Cards');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      productid: [productid, number()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/products/${mapped.productid}`;
    req.throwOn(400, ApiError, 'The product was either not found or is no longer available, Please contact support');
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param countrycode   The ISO code of the country you want to display available gift cards for.
   * @return Response from the API call
   */
  async reloadlyGiftCardsProductByIso(
    accept: string,
    authorization: string,
    countrycode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Gift Cards');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      countrycode: [countrycode, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/countries/${mapped.countrycode}/products`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Country not found and/or not currently supported');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
