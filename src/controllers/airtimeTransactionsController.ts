/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AirtimeTransactionsController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param size             This indicates the number of transactions to be retrieved on a page. Default
   *                                   value is 200.
   * @param page             This indicates the page of the transactions list being retrieved. Default value
   *                                   is 1.
   * @param countrycode      Indicates the ISO code of the country assigned to the top-up's receiver at the
   *                                   time the top-up transaction was made.
   * @param operatorid       Indicates the operator identification number assigned to the top-up transaction
   *                                   at the time it was made.
   * @param operatorName     Indicates the operator name assigned to the top-up transaction at the time it
   *                                   was made.
   * @param customIdentifier Indicates the unique reference assigned to the top-up transaction at the time
   *                                   it was made.
   * @param startDate        Indicates the beginning of the timeframe range for the transactions to be
   *                                   retrieved.
   * @param endDate          String  Indicates the end of the timeframe range for the transactions to be
   *                                   retrieved.
   * @return Response from the API call
   */
  async reloadlyAirtimeTransactions(
    accept: string,
    authorization: string,
    size?: number,
    page?: number,
    countrycode?: number,
    operatorid?: string,
    operatorName?: string,
    customIdentifier?: string,
    startDate?: string,
    endDate?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/topups/reports/transactions');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      size: [size, optional(number())],
      page: [page, optional(number())],
      countrycode: [countrycode, optional(number())],
      operatorid: [operatorid, optional(string())],
      operatorName: [operatorName, optional(string())],
      customIdentifier: [customIdentifier, optional(string())],
      startDate: [startDate, optional(string())],
      endDate: [endDate, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('size', mapped.size);
    req.query('page', mapped.page);
    req.query('countrycode', mapped.countrycode);
    req.query('operatorid', mapped.operatorid);
    req.query('operatorName', mapped.operatorName);
    req.query('customIdentifier', mapped.customIdentifier);
    req.query('startDate', mapped.startDate);
    req.query('endDate', mapped.endDate);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param transactionid This indicates the identification number of the transaction to be retrieved.
   * @return Response from the API call
   */
  async reloadlyAirtimeTransactionById(
    accept: string,
    authorization: string,
    transactionid: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      transactionid: [transactionid, number()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/topups/reports/transactions/${mapped.transactionid}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Airtime transaction not found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
