/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class UtilityPaymentsTransactionsController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param referenceId       The reference ID you may have specified while placing the transaction.
   * @param page              The page to be retrieved from the transaction list.
   * @param size              Number of items to include in a single page.
   * @param startDate         Indicates the start date for the range of transactions to be retrieved.
   * @param endDate           Indicates the end date for the range of transactions to be retrieved.
   * @param status            The transaction's status. Can be either PROCESSING, SUCCESSFUL, FAILED, or
   *                                    REFUNDED.
   * @param serviceType       The biller's service type. Can be either PREPAID or POSTPAID.
   * @param billerType        The biller's type. Can be either ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT,
   *                                    TV_BILL_PAYMENT, or INTERNET_BILL_PAYMENT
   * @param billerCountryCode Indicates the ISO code of the country where the biller is located.
   * @return Response from the API call
   */
  async reloadlyUtilityPaymentsTransactions(
    accept: string,
    authorization: string,
    referenceId?: string,
    page?: number,
    size?: number,
    startDate?: string,
    endDate?: string,
    status?: string,
    serviceType?: string,
    billerType?: string,
    billerCountryCode?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/transactions');
    req.baseUrl('Utility Payments');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      referenceId: [referenceId, optional(string())],
      page: [page, optional(number())],
      size: [size, optional(number())],
      startDate: [startDate, optional(string())],
      endDate: [endDate, optional(string())],
      status: [status, optional(string())],
      serviceType: [serviceType, optional(string())],
      billerType: [billerType, optional(string())],
      billerCountryCode: [billerCountryCode, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('referenceId', mapped.referenceId);
    req.query('page', mapped.page);
    req.query('size', mapped.size);
    req.query('startDate', mapped.startDate);
    req.query('endDate', mapped.endDate);
    req.query('status', mapped.status);
    req.query('serviceType', mapped.serviceType);
    req.query('billerType', mapped.billerType);
    req.query('billerCountryCode', mapped.billerCountryCode);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept
   * @param authorization
   * @param id            The utility payment's identification number.
   * @return Response from the API call
   */
  async reloadlyUtilityPaymentsTransactionById(
    accept: string,
    authorization: string,
    id: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Utility Payments');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      id: [id, number()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/transactions/${mapped.id}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
