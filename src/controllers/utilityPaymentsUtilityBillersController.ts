/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class UtilityPaymentsUtilityBillersController extends BaseController {
  /**
   * @param accept
   * @param authorization
   * @param id             This is the unique identification number of each biller. It uniquely identifies
   *                                 the biller servicing the utility.
   * @param name           This indicates the biller's name. In situations where the biller's name is
   *                                 exceptionally long, partial names are used.
   * @param type           This indicates the type of utility payment handled by the biller. Values included
   *                                 are ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT, TV_BILL_PAYMENT and
   *                                 INTERNET_BILL_PAYMENT.
   * @param serviceType    This indicates the payment service type being rendered by the utility biller
   *                                 service. Examples are PREPAID and POSTPAID.
   * @param countryISOCode This indicates the ISO code of the country where the utility biller is operating
   *                                 in.
   * @param page           This indicates the page of the billers list being retrieved. Default value is 1.
   * @param size           This indicates the number of billers to be retrieved on a page. Default value is
   *                                 200.
   * @return Response from the API call
   */
  async reloadlyUtilityPaymentsBillers(
    accept: string,
    authorization: string,
    id?: number,
    name?: string,
    type?: string,
    serviceType?: string,
    countryISOCode?: string,
    page?: number,
    size?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/billers');
    req.baseUrl('Utility Payments');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      id: [id, optional(number())],
      name: [name, optional(string())],
      type: [type, optional(string())],
      serviceType: [serviceType, optional(string())],
      countryISOCode: [countryISOCode, optional(string())],
      page: [page, optional(number())],
      size: [size, optional(number())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('id', mapped.id);
    req.query('name', mapped.name);
    req.query('type', mapped.type);
    req.query('serviceType', mapped.serviceType);
    req.query('countryISOCode', mapped.countryISOCode);
    req.query('page', mapped.page);
    req.query('size', mapped.size);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
