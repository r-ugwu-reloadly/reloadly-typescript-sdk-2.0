/**
 * reloadly-sdkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { boolean, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AirtimeOperatorsController extends BaseController {
  /**
   * @param accept              Example: application/com.reloadly.topups-v1+json
   * @param authorization
   * @param includeBundles      Indicates if any airtime and data bundles being offered by the operator
   *                                      should be included in the API response. Default value is true.
   * @param includeData         Indicates if any airtime or data plans being offered by the operator should
   *                                      be included in the API response. Default value is true.
   * @param suggestedAmountsMap Indicates if this field should be returned as a response. Default value is
   *                                      false.
   * @param size                This indicates the number of operators to be retrieved on a page. Default
   *                                      value is 200.
   * @param page                This indicates the page of the operator list being retrieved. Default value
   *                                      is 1.
   * @return Response from the API call
   */
  async reloadlyAirtimeOperators(
    accept: string,
    authorization: string,
    includeBundles?: string,
    includeData?: string,
    suggestedAmountsMap?: string,
    size?: string,
    page?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/operators');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      includeBundles: [includeBundles, optional(string())],
      includeData: [includeData, optional(string())],
      suggestedAmountsMap: [suggestedAmountsMap, optional(string())],
      size: [size, optional(string())],
      page: [page, optional(string())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('includeBundles', mapped.includeBundles);
    req.query('includeData', mapped.includeData);
    req.query('suggestedAmountsMap', mapped.suggestedAmountsMap);
    req.query('size', mapped.size);
    req.query('page', mapped.page);
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Not Found');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept              Example: application/com.reloadly.topups-v1+json
   * @param authorization
   * @param phone               The mobile number whose details are to be retrieved.
   * @param countryisocode      The ISO code of the country where the mobile number is registered.
   * @param countrycode
   * @param suggestedAmounts    Indicates if this field should be returned as a response. Default value is
   *                                       false.
   * @param suggestedAmountsMap Indicates if this field should be returned as a response. Default value is
   *                                       false.
   * @return Response from the API call
   */
  async reloadlyAirtimeOperatorAutodetect(
    accept: string,
    authorization: string,
    phone: string,
    countryisocode: string,
    countrycode: string,
    suggestedAmounts?: boolean,
    suggestedAmountsMap?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      phone: [phone, string()],
      countryisocode: [countryisocode, string()],
      countrycode: [countrycode, string()],
      suggestedAmounts: [suggestedAmounts, optional(boolean())],
      suggestedAmountsMap: [suggestedAmountsMap, optional(boolean())],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.query('suggestedAmounts', mapped.suggestedAmounts);
    req.query('suggestedAmountsMap', mapped.suggestedAmountsMap);
    req.appendTemplatePath`/operators/auto-detect/phone/${mapped.phone}/countries/${mapped.countryisocode}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Country code must be 2 characters ISO-Alpha-2 country code. See https://www.iban.com/country-codes');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept        Example: application/com.reloadly.topups-v1+json
   * @param authorization
   * @param operatorid    The operator's identification number.
   * @return Response from the API call
   */
  async reloadlyAirtimeOperatorById(
    accept: string,
    authorization: string,
    operatorid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      operatorid: [operatorid, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/operators/${mapped.operatorid}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Operator not found for given id');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param accept              Example: application/com.reloadly.topups-v1+json
   * @param authorization
   * @param countrycode         The ISO code of the country where the operator is registered.
   * @param includeBundles      Indicates if any airtime and data bundles being offered by the operator
   *                                       should be returned as a response. Default value is true.
   * @param suggestedAmountsMap Indicates if this field should be returned as a response. Default value is
   *                                       false.
   * @param suggestedAmounts    Indicates if this field should be returned as a response. Default value is
   *                                       false.
   * @param includePin          Indicates if PIN details if applicable to the operator, should be returned
   *                                       as a response. Default value is true.
   * @param includeData         Indicates if any data plans being offered by the operator should be
   *                                       returned as a response. Default value is true.
   * @return Response from the API call
   */
  async reloadlyAirtimeOperatorByIso(
    accept: string,
    authorization: string,
    countrycode: string,
    includeBundles: boolean,
    suggestedAmountsMap?: boolean,
    suggestedAmounts?: string,
    includePin?: boolean,
    includeData?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    req.baseUrl('Airtime');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      authorization: [authorization, string()],
      countrycode: [countrycode, string()],
      includeBundles: [includeBundles, boolean()],
      suggestedAmountsMap: [suggestedAmountsMap, optional(boolean())],
      suggestedAmounts: [suggestedAmounts, optional(string())],
      includePin: [includePin, optional(boolean())],
      includeData: [includeData, optional(boolean())],
    });
    req.header('Accept', mapped.accept);
    req.query('Authorization', mapped.authorization);
    req.query('includeBundles', mapped.includeBundles);
    req.query('suggestedAmountsMap', mapped.suggestedAmountsMap);
    req.query('suggestedAmounts', mapped.suggestedAmounts);
    req.query('includePin', mapped.includePin);
    req.query('includeData', mapped.includeData);
    req.appendTemplatePath`/operators/countries/${mapped.countrycode}`;
    req.throwOn(401, ApiError, 'Full authentication is required to access this resource');
    req.throwOn(404, ApiError, 'Country not found and/or not currently supported');
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }
}
